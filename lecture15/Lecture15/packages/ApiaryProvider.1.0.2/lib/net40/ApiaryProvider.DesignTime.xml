<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>ApiaryProvider.DesignTime</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ApiaryProvider.ProviderImplementation.RestApi`1">
<summary>
 Discriminated union that distinguish between function nodes 
 (with info &amp; name, but no subtrees) modules (with name &amp; sub-elements)
 and entities (that are accessible via parameter)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ApiaryProvider.ProviderImplementation.ApiarySchema.NameTree`1">
<summary>
 Represents a tree with module/function names
 Every node has a name, list of values under the node
 and a list of subtrees (other modules/functions)
</summary>
</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiarySchema.asRestApi``1(Microsoft.FSharp.Collections.FSharpMap{System.String,System.String},Microsoft.FSharp.Collections.FSharpList{ApiaryProvider.ProviderImplementation.ApiarySchema.NameTree{System.Tuple{System.String,``0}}})">
<summary>
 Convert name tree obtained from Apiary to our view of REST API
</summary>
</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiarySchema.|SpeciallyNamed|_|``1(Microsoft.FSharp.Collections.FSharpMap{System.String,System.String},Microsoft.FSharp.Collections.FSharpList{ApiaryProvider.ProviderImplementation.ApiarySchema.NameTree{``0}})">
<summary>
 Is there any specially named child node?
</summary>
</member>
<member name="">

</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiarySchema.getOperationTree(System.String)">
<summary>
 Get a tree structure with operation/module names from Apiary
</summary>
</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiarySchema.trimRoot``1(ApiaryProvider.ProviderImplementation.ApiarySchema.NameTree{``0})">
<summary>
 Removes all root elements that do not have any elements
 (i.e. if everything is nested under some common prefix)
</summary>
</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiarySchema.buildTree``1(System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{Microsoft.FSharp.Collections.FSharpList{System.String},``0}})">
<summary>
 Builds a name tree from items that have lists of names
 (items with the same prefixes end up in the same subtree)
</summary>
</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiarySchema.getPathComponents(System.String)">
<summary>
 Split path into components separated by slash
</summary>
</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiarySchema.downloadOperations(System.String)">
<summary>
 Download a list of operations with their method &amp; relative URL
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ApiaryProvider.ProviderImplementation.ApiarySchema">

</member>
<member name="">

</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiarySchemaAuto.|FindMethod|_|(Microsoft.FSharp.Collections.FSharpMap{System.String,System.String},System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}})">
<summary>
 Find an operation that uses HTTP method specified by &apos;findMeth&apos;
 and return the arguments together with (the method and) a path
</summary>
</member>
<member name="">

</member>
<member name="T:ApiaryProvider.ProviderImplementation.ApiarySchemaAuto">

</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiaryTypeBuilder.generateSchema(ApiaryProvider.ProviderImplementation.ApiaryGenerationContext,System.String,ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition,ApiaryProvider.ProviderImplementation.RestApi{System.Tuple{System.String,System.String}})">
<summary>
 This is the main recursive function that generates type for a &quot;RestApi&quot; specification. 

  * Modules are turned into nested types (so functions under a module
    become static methods callable via `Module.Function(...)`)
 
  * Functions are turned into static methods that return value of 
    a type that is automatically inferred from the JSON sample
    (ideally we should support other formats too...)

  * Entities that have &quot;GET&quot; operation are turned into method that returns
    a type representing the entity. All nested functions of the entity
    are added to this type (and at runtime we need to keep arguments around)

</summary>
</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiaryTypeBuilder.generateOperations(ApiaryProvider.ProviderImplementation.ApiaryGenerationContext,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},System.String,System.String,FSharp.Data.JsonValue,System.Type,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Generates method that invokes a specified operation or retrieves
 an entity given some arguments (which can contain additional methods)
 This code also generates an asynchronous version of the operation
</summary>
</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiaryTypeBuilder.generateHeadersForCall(FSharp.Data.JsonValue)">
<summary>
 Generates formatted string with headers that must be
 passed to a call according to apiary.io specification
</summary>
</member>
<member name="">

</member>
<member name="M:ApiaryProvider.ProviderImplementation.ApiaryTypeBuilder.generateMembersForJsonResult(ApiaryProvider.ProviderImplementation.ApiaryGenerationContext,System.String,FSharp.Data.JsonValue)">
<summary>
 Given a specification (returned by the apiary.io service) 
 infer structure of JSON and generate a type for the result

 TODO: Lots of room for improvement here (pattern matching based
 on error codes, handle other file formats like XML...)
</summary>
</member>
<member name="">

</member>
<member name="T:ApiaryProvider.ProviderImplementation.ApiaryTypeBuilder">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ApiaryProvider.Runtime.ApiaryUtils">

</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
